%%%
%%% SDF grammar for the language "Java_1_1".
%%%
%%% This grammar is part of the Grammar Base which is located at
%%%      http://www.program-transformation.org/gb/
%%% 
%%%  Grammar: Java_1_1
%%%  Version: 1
%%% Maturity: Volatile
%%%
%%% Description:
%%%  Object-oriented programming language

definition

module Types
exports
  sorts ClassType InterfaceType ClassOrInterfaceType PrimitiveType ReferenceType Type

  context-free syntax
    PrimitiveType -> Type {cons("PrimitiveType")}
    ReferenceType -> Type {cons("ReferenceType")}
    NumericType -> PrimitiveType {cons("NumericType")}
    "boolean" -> PrimitiveType {cons("boolean")}
    IntegralType -> NumericType {cons("IntegralType")}
    FloatingPointType -> NumericType {cons("FloatingPointType")}
    "byte" -> IntegralType {cons("byte")}
    "short" -> IntegralType {cons("short")}
    "int" -> IntegralType {cons("int")}
    "long" -> IntegralType {cons("long")}
    "char" -> IntegralType {cons("char")}
    "float" -> FloatingPointType {cons("float")}
    "double" -> FloatingPointType {cons("double")}
    ClassOrInterfaceType -> ReferenceType {cons("ClassOrInterfaceType")}
    ArrayType -> ReferenceType {cons("ArrayType")}
    Name -> ClassOrInterfaceType {cons("Name")}
    ClassOrInterfaceType -> ClassType {cons("ClassOrInterfaceType1")}
    ClassOrInterfaceType -> InterfaceType {cons("ClassOrInterfaceType2")}
    PrimitiveType "[" "]" -> ArrayType {cons("PrimitiveType1")}
    Name "[" "]" -> ArrayType {cons("ArrayType0")}
    ArrayType "[" "]" -> ArrayType {cons("ArrayType1")}

module Statements
exports
  sorts Block BlockStatement

  context-free syntax
    "{" BlockStatement* "}" -> Block {cons("BlockStatement-s")}
    LocalVariableDeclarationStatement -> BlockStatement {cons("LocalVariableDeclarationStatement")}
    Statement -> BlockStatement {cons("Statement")}
    LocalVariableDeclaration ";" -> LocalVariableDeclarationStatement {cons("semicolon")}
    Type {VariableDeclarator ","}+ -> LocalVariableDeclaration {cons("comma")}
    StatementWithoutTrailingSubstatement -> Statement {cons("StatementWithoutTrailingSubstatement")}
    LabeledStatement -> Statement {cons("LabeledStatement")}
    IfThenStatement -> Statement {cons("IfThenStatement")}
    IfThenElseStatement -> Statement {cons("IfThenElseStatement")}
    WhileStatement -> Statement {cons("WhileStatement")}
    ForStatement -> Statement {cons("ForStatement")}
    StatementWithoutTrailingSubstatement -> StatementNoShortIf {cons("StatementWithoutTrailingSubstatement1")}
    LabeledStatementNoShortIf -> StatementNoShortIf {cons("LabeledStatementNoShortIf")}
    IfThenElseStatementNoShortIf -> StatementNoShortIf {cons("IfThenElseStatementNoShortIf")}
    WhileStatementNoShortIf -> StatementNoShortIf {cons("WhileStatementNoShortIf")}
    ForStatementNoShortIf -> StatementNoShortIf {cons("ForStatementNoShortIf")}
    Block -> StatementWithoutTrailingSubstatement {cons("Block")}
    EmptyStatement -> StatementWithoutTrailingSubstatement {cons("EmptyStatement")}
    ExpressionStatement -> StatementWithoutTrailingSubstatement {cons("ExpressionStatement")}
    SwitchStatement -> StatementWithoutTrailingSubstatement {cons("SwitchStatement")}
    DoStatement -> StatementWithoutTrailingSubstatement {cons("DoStatement")}
    BreakStatement -> StatementWithoutTrailingSubstatement {cons("BreakStatement")}
    ContinueStatement -> StatementWithoutTrailingSubstatement {cons("ContinueStatement")}
    ReturnStatement -> StatementWithoutTrailingSubstatement {cons("ReturnStatement")}
    SynchronizedStatement -> StatementWithoutTrailingSubstatement {cons("SynchronizedStatement")}
    ThrowStatement -> StatementWithoutTrailingSubstatement {cons("ThrowStatement")}
    TryStatement -> StatementWithoutTrailingSubstatement {cons("TryStatement")}
    ";" -> EmptyStatement {cons("semicolon1")}
    Identifier ":" Statement -> LabeledStatement {cons("colon")}
    Identifier ":" StatementNoShortIf -> LabeledStatementNoShortIf {cons("colon1")}
    StatementExpression ";" -> ExpressionStatement {cons("semicolon2")}
    MethodInvocation -> StatementExpression {cons("MethodInvocation")}
    ClassInstanceCreationExpression -> StatementExpression {cons("ClassInstanceCreationExpression")}
    ClassDeclaration -> Statement {cons("ClassDeclaration")}
    "if" "(" Expression ")" Statement -> IfThenStatement {cons("if")}
    "if" "(" Expression ")" StatementNoShortIf "else" Statement -> IfThenElseStatement {cons("if-else")}
    "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf -> IfThenElseStatementNoShortIf {cons("if-else1")}
    "switch" "(" Expression ")" SwitchBlock -> SwitchStatement {cons("switch")}
    "{" SwitchBlockStatementGroup* SwitchLabel* "}" -> SwitchBlock {cons("SwitchBlockStatementGroup-s-SwitchLabel-s")}
    SwitchLabel+ BlockStatement+ -> SwitchBlockStatementGroup {cons("SwitchLabel-p-BlockStatement-p")}
    "case" Expression ":" -> SwitchLabel {cons("case-colon")}
    "default" ":" -> SwitchLabel {cons("default-colon")}
    "while" "(" Expression ")" Statement -> WhileStatement {cons("while")}
    "while" "(" Expression ")" StatementNoShortIf -> WhileStatementNoShortIf {cons("while1")}
    "do" Statement "while" "(" Expression ")" ";" -> DoStatement {cons("do-while-semicolon")}
    "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement -> ForStatement {cons("for-semicolon-semicolon")}
    "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf -> ForStatementNoShortIf {cons("for-semicolon-semicolon1")}
    StatementExpressionList -> ForInit {cons("StatementExpressionListForInit")}
    LocalVariableDeclaration -> ForInit {cons("LocalVariableDeclaration")}
    StatementExpressionList -> ForUpdate {cons("StatementExpressionList1")}
    {StatementExpression ","}+ -> StatementExpressionList {cons("StatementExpressionList")}
    "break" Identifier? ";" -> BreakStatement {cons("break-semicolon")}
    "continue" Identifier? ";" -> ContinueStatement {cons("continue-semicolon")}
    "return" Expression? ";" -> ReturnStatement {cons("return-semicolon")}
    "throw" Expression ";" -> ThrowStatement {cons("throw-semicolon")}
    "synchronized" "(" Expression ")" Block -> SynchronizedStatement {cons("synchronized")}
    "try" Block CatchClause+ -> TryStatement {cons("try")}
    "try" Block CatchClause* Finally -> TryStatement {cons("try1")}
    "catch" "(" FormalParameter ")" Block -> CatchClause {cons("catch")}
    "finally" Block -> Finally {cons("finally")}

module Names
exports
  sorts SimpleName Name

  context-free syntax
    {Identifier "."}+ -> Name {cons("Identifier-p")}
    {Identifier "."}+ "." "class" -> Name {cons("class")}
    Identifier -> SimpleName {cons("Identifier")}

module Modifiers
exports
  sorts Modifier

  context-free syntax
    "public" -> Modifier {cons("public")}
    "protected" -> Modifier {cons("protected")}
    "private" -> Modifier {cons("private")}
    "static" -> Modifier {cons("static")}
    "abstract" -> Modifier {cons("abstract")}
    "final" -> Modifier {cons("final")}
    "native" -> Modifier {cons("native")}
    "synchronized" -> Modifier {cons("synchronized1")}
    "transient" -> Modifier {cons("transient")}
    "volatile" -> Modifier {cons("volatile")}

module MethodDecl
exports
  sorts MethodDeclaration FormalParameter MethodHeader

  context-free syntax
    MethodHeader MethodBody -> MethodDeclaration {cons("MethodHeader-MethodBody")}
    Modifier* Type MethodDeclarator Throws? -> MethodHeader {cons("Modifier-s-Type-MethodDeclarator-Throws-opt")}
    Modifier* "void" MethodDeclarator Throws? -> MethodHeader {cons("void")}
    Identifier "(" {FormalParameter ","}* ")" -> MethodDeclarator {cons("comma2")}
    MethodDeclarator "[" "]" -> MethodDeclarator {cons("MethodDeclarator")}
    Type VariableDeclaratorId -> FormalParameter {cons("Type-VariableDeclaratorId")}
    "throws" {ClassType ","}+ -> Throws {cons("throws-comma")}
    Block -> MethodBody {cons("Block1")}
    ";" -> MethodBody {cons("semicolon3")}

module Lexical
exports
  sorts Identifier Literal

  lexical syntax
    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape
    "0" [lL]? -> DecimalIntegerLiteral
    [1-9] [0-9]* [lL]? -> DecimalIntegerLiteral
    [0] [xX] [0-9a-fA-F]+ [lL]? -> HexIntegerLiteral
    [0] [0-7]+ [lL]? -> OctalIntegerLiteral
    [0-9]+ "." [0-9]* ( [eE] [\+\-]? [0-9]+ )? [fFdD]? -> FloatingPointLiteral
    "." [0-9]+ ( [eE] [\+\-]? [0-9]+ )? [fFdD]? -> FloatingPointLiteral
    [0-9]+ [eE] [\+\-]? [0-9]+ [fFdD]? -> FloatingPointLiteral
    [0-9]+ ( [eE] [\+\-]? [0-9]+ )? [fFdD] -> FloatingPointLiteral
    "true" -> BooleanLiteral
    "false" -> BooleanLiteral
    "null" -> NullLiteral
    UnicodeEscape -> SingleCharacter
    ~[\'\\] -> SingleCharacter
    "'" SingleCharacter "'" -> CharacterLiteral
    "\\" [btnfr\"\'\\] -> EscapeSequence
    "\\" [0-7] -> EscapeSequence
    "\\" [0-7] [0-7] -> EscapeSequence
    "\\" [0-3] [0-7] [0-7] -> EscapeSequence
    "'" EscapeSequence "'" -> CharacterLiteral
    UnicodeEscape -> StringCharacter
    ~[\"\\] -> StringCharacter
    EscapeSequence -> StringCharacter
    [A-Za-z\_\$] [A-Za-z0-9\_\$]* -> Identifier
    "void" -> Identifier {reject}
    "class" -> Identifier {reject}
    "extends" -> Identifier {reject}
    "implements" -> Identifier {reject}
    "static" -> Identifier {reject}
    "this" -> Identifier {reject}
    "super" -> Identifier {reject}
    "new" -> Identifier {reject}
    "instanceof" -> Identifier {reject}
    "interface" -> Identifier {reject}
    "true" -> Identifier {reject}
    "false" -> Identifier {reject}
    "null" -> Identifier {reject}
    "throws" -> Identifier {reject}
    "public" -> Identifier {reject}
    "protected" -> Identifier {reject}
    "private" -> Identifier {reject}
    "abstract" -> Identifier {reject}
    "final" -> Identifier {reject}
    "native" -> Identifier {reject}
    "synchronized" -> Identifier {reject}
    "transient" -> Identifier {reject}
    "volatile" -> Identifier {reject}
    "package" -> Identifier {reject}
    "import" -> Identifier {reject}
    "if" -> Identifier {reject}
    "else" -> Identifier {reject}
    "switch" -> Identifier {reject}
    "case" -> Identifier {reject}
    "default" -> Identifier {reject}
    "while" -> Identifier {reject}
    "do" -> Identifier {reject}
    "for" -> Identifier {reject}
    "break" -> Identifier {reject}
    "continue" -> Identifier {reject}
    "return" -> Identifier {reject}
    "throw" -> Identifier {reject}
    "try" -> Identifier {reject}
    "catch" -> Identifier {reject}
    "finally" -> Identifier {reject}
    "boolean" -> Identifier {reject}
    "byte" -> Identifier {reject}
    "short" -> Identifier {reject}
    "int" -> Identifier {reject}
    "long" -> Identifier {reject}
    "char" -> Identifier {reject}
    "float" -> Identifier {reject}
    "double" -> Identifier {reject}
    "\"" StringCharacter* "\"" -> StringLiteral {cons("StringCharacter-s")}

  lexical restrictions
    "void" "class" "extends" "implements" "static" "this" "super" "new" "instanceof" "interface" "true" "false" "null" "throws" "public" "protected" "private" "abstract" "final" "native" "synchronized" "transient" "volatile" "package" "import" "if" "else" "switch" "case" "default" "while" "do" "for" "break" "continue" "return" "throw" "try" "catch" "finally" "boolean" "byte" "short" "int" "long" "char" "float" "double" -/- [a-zA-Z0-9\_]
    Identifier -/- [a-zA-Z0-9\_\$]
    DecimalIntegerLiteral -/- [a-zA-Z0-9\_\.]
    HexIntegerLiteral -/- [a-zA-Z0-9\_\.]
    OctalIntegerLiteral -/- [a-zA-Z0-9\_\.]
    FloatingPointLiteral -/- [a-zA-Z0-9\_\.]

  context-free syntax
    DecimalIntegerLiteral -> IntegerLiteral {cons("DecimalIntegerLiteral")}
    HexIntegerLiteral -> IntegerLiteral {cons("HexIntegerLiteral")}
    OctalIntegerLiteral -> IntegerLiteral {cons("OctalIntegerLiteral")}
    IntegerLiteral -> Literal {cons("IntegerLiteral")}
    FloatingPointLiteral -> Literal {cons("FloatingPointLiteral")}
    BooleanLiteral -> Literal {cons("BooleanLiteral")}
    CharacterLiteral -> Literal {cons("CharacterLiteral")}
    StringLiteral -> Literal {cons("StringLiteral")}
    NullLiteral -> Literal {cons("NullLiteral")}

module Layout
exports
  lexical syntax
    [\ \t\n\013] -> LAYOUT

  context-free restrictions
    LAYOUT? -/- [\ \t\n\013]

module Comment
imports Layout

exports
  lexical syntax
%%    "/*" ( ~[\*] | Asterisk )* "*/" -> Comment
%% change for JJForester, no alternative "|"
    "/*" CommentChar* "*/" -> Comment
    ~[\*]	-> CommentChar
    Asterisk	-> CommentChar
%% end change

    Comment -> LAYOUT
    [\*] -> Asterisk
    "//" ~[\n]* [\n] -> Comment

  lexical restrictions
    Asterisk -/- [\/]

  context-free restrictions
    LAYOUT? -/- [\/].[\/]

module Interfaces
exports
  sorts InterfaceDeclaration

  context-free syntax
    Modifier* "interface" Identifier ExtendsInterfaces? InterfaceBody -> InterfaceDeclaration {cons("interface")}
    "extends" {InterfaceType ","}+ -> ExtendsInterfaces {cons("extends-comma")}
    "{" InterfaceMemberDeclaration* "}" -> InterfaceBody {cons("InterfaceMemberDeclaration-s")}
    ConstantDeclaration -> InterfaceMemberDeclaration {cons("ConstantDeclaration")}
    AbstractMethodDeclaration -> InterfaceMemberDeclaration {cons("AbstractMethodDeclaration")}
    FieldDeclaration -> ConstantDeclaration {cons("FieldDeclaration")}
    MethodHeader ";" -> AbstractMethodDeclaration {cons("semicolon4")}

module FieldDecl
exports
  sorts FieldDeclaration VariableDeclaratorId VariableDeclarator

  context-free syntax
    Modifier* Type {VariableDeclarator ","}+ ";" -> FieldDeclaration {cons("comma-semicolon")}
    VariableDeclaratorId -> VariableDeclarator {cons("VariableDeclaratorId")}
    VariableDeclaratorId "=" VariableInitializer -> VariableDeclarator {cons("equal")}
    Identifier -> VariableDeclaratorId {cons("Identifier1")}
    VariableDeclaratorId "[" "]" -> VariableDeclaratorId {cons("VariableDeclaratorId1")}
    Expression -> VariableInitializer {cons("Expression")}
    ArrayInitializer -> VariableInitializer {cons("ArrayInitializer")}
    "{" {VariableInitializer ","}* ","? "}" -> ArrayInitializer {cons("comma-comma")}

module Expressions
exports
  sorts Expression MethodInvocation StatementExpression

  context-free syntax
    PrimaryNoNewArray -> Primary {cons("PrimaryNoNewArray")}
    ArrayCreationExpression -> Primary {cons("ArrayCreationExpression")}
    Literal -> PrimaryNoNewArray {cons("Literal")}
    "this" -> PrimaryNoNewArray {cons("this0")}
    Name "." "this" -> PrimaryNoNewArray {cons("this1")}
    "(" Expression ")" -> PrimaryNoNewArray {cons("Expression1")}
    ClassInstanceCreationExpression -> PrimaryNoNewArray {cons("ClassInstanceCreationExpression1")}
    FieldAccess -> PrimaryNoNewArray {cons("FieldAccess")}
    MethodInvocation -> PrimaryNoNewArray {cons("MethodInvocation1")}
    ArrayAccess -> PrimaryNoNewArray {cons("ArrayAccess")}
    "new" ClassType "(" {Expression ","}* ")" -> ClassInstanceCreationExpression {cons("new-comma")}
    "new" ClassType "(" {Expression ","}* ")" ClassBody -> ClassInstanceCreationExpression {cons("new-comma1")}
    "new" PrimitiveType DimExpr+ Dim* -> ArrayCreationExpression {cons("new")}
%%    "new" ClassOrInterfaceType DimExpr+ Dim* -> ArrayCreationExpression {cons("new1")}
    "new" ClassOrInterfaceType DimExpr+ Dim* -> ArrayCreationExpression {cons("new1")}
    "new" ClassOrInterfaceType DimExprInitialized+ ArrayInitializer -> ArrayCreationExpression {cons("new2")}
    "[" Expression? "]" -> DimExprInitialized {cons("Expression-opt")}
    "[" Expression "]" -> DimExpr {cons("Expression2")}
    "[" "]" -> Dim {cons("Dim-dunno-a_0")}
    Name -> FieldAccess {cons("Name1")}
    Primary "." Identifier -> FieldAccess {cons("Primary-Identifier")}
    "super" "." Identifier -> FieldAccess {cons("super")}
    Name "(" {Expression ","}* ")" -> MethodInvocation {cons("NameMethodInvocation")}
    Primary "." Identifier "(" {Expression ","}* ")" -> MethodInvocation {cons("PrimaryMethodInvocation")}
    "super" "." Identifier "(" {Expression ","}* ")" -> MethodInvocation {cons("SuperMethodInvocation")}
    Name "[" Expression "]" -> ArrayAccess {cons("Name-Expression")}
    PrimaryNoNewArray "[" Expression "]" -> ArrayAccess {cons("PrimaryNoNewArray-Expression")}
    Primary -> Expression {cons("Primary")}
    Expression "++" -> StatementExpression {prefer, cons("incr2")}
    Expression "--" -> StatementExpression {prefer, cons("decr2")}
    "+" Expression -> Expression {cons("plus")}
    "-" Expression -> Expression {cons("minus")}
    "++" Expression -> StatementExpression {prefer, cons("incr3")}
    "--" Expression -> StatementExpression {prefer, cons("decr3")}
    "~" Expression -> Expression {cons("tilde")}
    "!" Expression -> Expression {cons("not")}
    "(" PrimitiveType Dim* ")" Expression -> Expression {cons("PrimitiveType-Dim-s-Expression")}
    "(" Expression ")" Expression -> Expression {left, cons("Expression-Expression2")}
    "(" Name Dim+ ")" Expression -> Expression {cons("Name-Dim-p-Expression")}
%%    Expression ( "*" | "/" | "%" ) Expression -> Expression {left, cons("Expression-times-or-div-or-mod-Expression1")}
    Expression TempHuub1 Expression -> Expression {left, cons("Expression-times-or-div-or-mod-Expression1") }
    "*" -> TempHuub1 {cons("temphuub1_1")}
    "/" -> TempHuub1 {cons("temphuub1_2")}
    "%" -> TempHuub1 {cons("temphuub1_3")}


%%    Expression ( "+" | "-" ) Expression -> Expression {left, cons("Expression-plus-or-minus-Expression1")}
    Expression TempHuub2 Expression -> Expression {left, cons("Expression-plus-or-minus-Expression1")}
    "+" -> TempHuub2 {cons("temphuub2_1")}
    "-" -> TempHuub2 {cons("temphuub2_2")}


%%    Expression ( "<<" | ">>" | ">>>" ) Expression -> Expression {left, cons("Expression-shift-left-or-shift-right-or-Expression1")}
    Expression TempHuub3 Expression -> Expression {left, cons("Expression-shift-left-or-shift-right-or-Expression1")}
    "<<" -> TempHuub3 {cons("temphuub3_1")}
    ">>" -> TempHuub3 {cons("temphuub3_2")}
    ">>>" -> TempHuub3 {cons("temphuub3_3")}


%%    Expression ( "<" | ">" | "<=" | ">=" ) Expression -> Expression {left, cons("Expression-lt-or-gt-or-le-or-ge-Expression1")}
    Expression TempHuub4 Expression -> Expression {left, cons("Expression-lt-or-gt-or-le-or-ge-Expression1")} 
    "<" -> TempHuub4 {cons("temphuub4_1")}
    ">" -> TempHuub4 {cons("temphuub4_2")}
    "<=" -> TempHuub4 {cons("temphuub4_3")}
    ">=" -> TempHuub4 {cons("temphuub4_4")}


    Expression "instanceof" ReferenceType -> Expression {cons("instanceof")}
%%    Expression ( "==" | "!=" ) Expression -> Expression {left, cons("Expression-equal-or-not-equal-Expression1")}
    Expression TempHuub5 Expression -> Expression {left, cons("Expression-equal-or-not-equal-Expression1")}
    "==" -> TempHuub5 {cons("temphuub5_1")}
    "!=" -> TempHuub5 {cons("temphuub5_2")}


    Expression "&" Expression -> Expression {left, cons("address1")}
    Expression "^" Expression -> Expression {left, cons("Expression-Expression3")}
    Expression "|" Expression -> Expression {left, cons("bar1")}
    Expression "&&" Expression -> Expression {left, cons("and1")}
    Expression "||" Expression -> Expression {left, cons("or1")}
    Expression "?" Expression ":" Expression -> Expression {right, cons("colon2")}
    LeftHandSide AssignmentOperator Expression -> Assignment {cons("LeftHandSide-AssignmentOperator-Expression")}
    Name -> LeftHandSide {cons("Name2")}
    FieldAccess -> LeftHandSide {cons("FieldAccess1")}
    ArrayAccess -> LeftHandSide {cons("ArrayAccess1")}
    "=" -> AssignmentOperator {cons("equal1")}
    "*=" -> AssignmentOperator {cons("assignMul")}
    "/=" -> AssignmentOperator {cons("assignDiv")}
    "%=" -> AssignmentOperator {cons("assignMod")}
    "+=" -> AssignmentOperator {cons("assignPlus")}
    "-=" -> AssignmentOperator {cons("assignMin")}
    "<<=" -> AssignmentOperator {cons("assignSL")}
    ">>=" -> AssignmentOperator {cons("assignSR")}
    ">>>=" -> AssignmentOperator {cons("AssignmentOperator-dunno-b_0")}
    "&=" -> AssignmentOperator {cons("assignAnd")}
    "^=" -> AssignmentOperator {cons("assignExp")}
    "|=" -> AssignmentOperator {cons("assignOr")}
    Assignment -> StatementExpression {cons("Assignment")}
    StatementExpression -> Expression {cons("StatementExpression")}
    Assignment -> Expression {cons("Assignment1")}

  context-free priorities
    { Expression "++" -> StatementExpression {cons("incr2")}
      Expression "--" -> StatementExpression {cons("decr2")} } >
    { "++" Expression -> StatementExpression {cons("incr3")}
      "--" Expression -> StatementExpression {cons("decr3")}
      "+" Expression -> Expression {cons("plus")}
      "-" Expression -> Expression {cons("minus")}
      "~" Expression -> Expression {cons("tilde")}
      "!" Expression -> Expression {cons("not")} } >
    "(" PrimitiveType Dim* ")" Expression -> Expression {cons("PrimitiveType-Dim-s-Expression")} >
    "(" Expression ")" Expression -> Expression {cons("Expression-Expression2")} >
    "(" Name Dim+ ")" Expression -> Expression {cons("Name-Dim-p-Expression")} >
%%    Expression ( "*" | "/" | "%" ) Expression -> Expression {cons("Expression-times-or-div-or-mod-Expression1")} >
    Expression TempHuub1 Expression -> Expression >


%%    Expression ( "+" | "-" ) Expression -> Expression {cons("Expression-plus-or-minus-Expression1")} >
    Expression TempHuub2 Expression -> Expression >


%%    Expression ( "<<" | ">>" | ">>>" ) Expression -> Expression {cons("Expression-shift-left-or-shift-right-or-Expression1")} >
    Expression TempHuub3 Expression -> Expression >


%%    Expression ( "<" | ">" | "<=" | ">=" ) Expression -> Expression {cons("Expression-lt-or-gt-or-le-or-ge-Expression1")} >
    Expression TempHuub4 Expression -> Expression >



    Expression "instanceof" ReferenceType -> Expression {cons("instanceof")} >
%%    Expression ( "==" | "!=" ) Expression -> Expression {cons("Expression-equal-or-not-equal-Expression1")} >
    Expression TempHuub5 Expression -> Expression >



    Expression "&" Expression -> Expression {cons("address1")} >
    Expression "^" Expression -> Expression {cons("Expression-Expression3")} >
    Expression "|" Expression -> Expression {cons("bar1")} >
    Expression "&&" Expression -> Expression {cons("and1")} >
    Expression "||" Expression -> Expression {cons("or1")} >
    Expression "?" Expression ":" Expression -> Expression {cons("colon2")} >
    Assignment -> Expression {cons("Assignment1")}

module ConstructorDecl
exports
  sorts ConstructorDeclaration

  context-free syntax
    Modifier* ConstructorDeclarator Throws? ConstructorBody -> ConstructorDeclaration {cons("Modifier-s-ConstructorDeclarator-Throws-opt-ConstructorBody")}
    SimpleName "(" {FormalParameter ","}* ")" -> ConstructorDeclarator {cons("comma5")}
    "{" ExplicitConstructorInvocation? BlockStatement* "}" -> ConstructorBody {cons("ExplicitConstructorInvocation-opt-BlockStatement-s")}
    "this" "(" {Expression ","}* ")" ";" -> ExplicitConstructorInvocation {cons("this-comma-semicolon")}
    "super" "(" {Expression ","}* ")" ";" -> ExplicitConstructorInvocation {cons("super-comma-semicolon")}

module ClassDecl
exports
  sorts ClassBody ClassDeclaration

  context-free syntax
    Modifier* "class" Identifier Super? Interfaces? ClassBody -> ClassDeclaration {cons("class1")}
    "extends" ClassType -> Super {cons("extends")}
    "implements" {InterfaceType ","}+ -> Interfaces {cons("implements-comma")}
    "{" ClassBodyDeclaration* "}" -> ClassBody {cons("ClassBodyDeclaration-s")}
    ClassMemberDeclaration -> ClassBodyDeclaration {cons("ClassMemberDeclaration")}
    StaticInitializer -> ClassBodyDeclaration {cons("StaticInitializer")}
    ConstructorDeclaration -> ClassBodyDeclaration {cons("ConstructorDeclaration")}
    ";" -> ClassBodyDeclaration {cons("EmptyClassBodyDeclaration")}
    ClassDeclaration -> ClassBodyDeclaration {cons("ClassDeclaration1")}
    FieldDeclaration -> ClassMemberDeclaration {cons("FieldDeclaration1")}
    MethodDeclaration -> ClassMemberDeclaration {cons("MethodDeclaration")}
    "static" Block -> StaticInitializer {cons("static1")}
    InterfaceDeclaration -> ClassBodyDeclaration {cons("ClassDeclaration2")}

module Java
imports ClassDecl ConstructorDecl Expressions FieldDecl Interfaces Comment Lexical MethodDecl Modifiers Names Statements Types

exports
  sorts CompilationUnit File*

  lexical syntax
    "FILE:" ~[\n]* "\n" -> FileHeader

  context-free syntax
    FileHeader CompilationUnit -> File {cons("file-with-header")}

  context-free syntax
    PackageDeclaration? ImportDeclaration* TypeDeclaration+ 
      -> CompilationUnit {cons("CU")}
    "package" Name ";" -> PackageDeclaration {cons("package-semicolon")}
    SingleTypeImportDeclaration -> ImportDeclaration {cons("SingleTypeImportDeclaration")}
    TypeImportOnDemandDeclaration -> ImportDeclaration {cons("TypeImportOnDemandDeclaration")}
    "import" Name ";" -> SingleTypeImportDeclaration {cons("import-semicolon")}
    "import" Name "." "*" ";" -> TypeImportOnDemandDeclaration {cons("import-times-semicolon")}
    ClassDeclaration -> TypeDeclaration {cons("ClassTypeDeclaration")}
    InterfaceDeclaration -> TypeDeclaration {cons("InterfaceDeclaration")}
    ";" -> TypeDeclaration {cons("semicolon5")}

  variables
    "#CU" [0-9]* -> CompilationUnit {cons("CompilationUnit-dunno-c_0")}

%% module GB-Main
%% 
%% imports Java

%% exports
%%  syntax
%%    <START> -> SURROGATE-START {cons("\"Java_1_1-1\"")}
%%    SURROGATE-START [\256] -> <Start> {prefer, cons("SURROGATE-START")}

module Main

imports Java
exports
  sorts
    CompilationUnits
  exports
    context-free syntax
      CompilationUnit* -> CompilationUnits {cons("CompilationUnits")}

